//------------------------------------------------------------------------------
// This is auto-generated code.
//------------------------------------------------------------------------------
// This code was generated by Entity Developer tool using EF Core template.
// Code is generated on: 4/1/2017 6:19:13 PM
//
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
//------------------------------------------------------------------------------

using System;
using System.Data;
using System.Linq;
using System.Linq.Expressions;
using System.ComponentModel;
using System.Reflection;
using System.Data.Common;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Internal;
using Microsoft.EntityFrameworkCore.Metadata;

namespace DotVueCore.Data.Models
{

    public partial class BlogEntities : DbContext
    {

        public BlogEntities() :
            base()
        {
            OnCreated();
        }

        public BlogEntities(DbContextOptions<BlogEntities> options) :
            base(options)
        {
            OnCreated();
        }

        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            optionsBuilder.UseSqlServer(@"Data Source=localhost\sqlexpress;Initial Catalog=BlogDB;Integrated Security=False;Persist Security Info=True;User ID=sa;Password=123qwe!@#");
            CustomizeConfiguration(ref optionsBuilder);
            base.OnConfiguring(optionsBuilder);
        }

        partial void CustomizeConfiguration(ref DbContextOptionsBuilder optionsBuilder);

        public virtual DbSet<Blog> Blogs
        {
            get;
            set;
        }

        public virtual DbSet<Category> Categories
        {
            get;
            set;
        }

        public virtual DbSet<CategoriesPost> CategoriesPosts
        {
            get;
            set;
        }

        public virtual DbSet<Comment> Comments
        {
            get;
            set;
        }

        public virtual DbSet<Post> Posts
        {
            get;
            set;
        }

        public virtual DbSet<Tag> Tags
        {
            get;
            set;
        }

        public virtual DbSet<User> Users
        {
            get;
            set;
        }

        public virtual DbSet<UsersBlog> UsersBlogs
        {
            get;
            set;
        }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            this.BlogMapping(modelBuilder);
            this.CustomizeBlogMapping(modelBuilder);

            this.CategoryMapping(modelBuilder);
            this.CustomizeCategoryMapping(modelBuilder);

            this.CategoriesPostMapping(modelBuilder);
            this.CustomizeCategoriesPostMapping(modelBuilder);

            this.CommentMapping(modelBuilder);
            this.CustomizeCommentMapping(modelBuilder);

            this.PostMapping(modelBuilder);
            this.CustomizePostMapping(modelBuilder);

            this.TagMapping(modelBuilder);
            this.CustomizeTagMapping(modelBuilder);

            this.UserMapping(modelBuilder);
            this.CustomizeUserMapping(modelBuilder);

            this.UsersBlogMapping(modelBuilder);
            this.CustomizeUsersBlogMapping(modelBuilder);

            RelationshipsMapping(modelBuilder);
            CustomizeMapping(ref modelBuilder);
        }
    
        #region Blog Mapping

        private void BlogMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<Blog>().ToTable(@"Blogs", @"dbo");
            modelBuilder.Entity<Blog>().Property<int>(x => x.Id).HasColumnName(@"Id").HasColumnType(@"int").IsRequired().ValueGeneratedOnAdd();
            modelBuilder.Entity<Blog>().Property<string>(x => x.Title).HasColumnName(@"Title").HasColumnType(@"nvarchar(50)").ValueGeneratedNever().HasMaxLength(50);
            modelBuilder.Entity<Blog>().Property<string>(x => x.SubTitle).HasColumnName(@"SubTitle").HasColumnType(@"nvarchar(50)").ValueGeneratedNever().HasMaxLength(50);
            modelBuilder.Entity<Blog>().Property<System.Nullable<bool>>(x => x.AllowsComments).HasColumnName(@"AllowsComments").HasColumnType(@"bit").ValueGeneratedNever();
            modelBuilder.Entity<Blog>().Property<System.Nullable<System.DateTime>>(x => x.CreatedAt).HasColumnName(@"CreatedAt").HasColumnType(@"datetime2").ValueGeneratedNever();
            modelBuilder.Entity<Blog>().HasKey(@"Id");
        }
	
        partial void CustomizeBlogMapping(ModelBuilder modelBuilder);

        #endregion
    
        #region Category Mapping

        private void CategoryMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<Category>().ToTable(@"Categories", @"dbo");
            modelBuilder.Entity<Category>().Property<int>(x => x.Id).HasColumnName(@"Id").HasColumnType(@"int").IsRequired().ValueGeneratedOnAdd();
            modelBuilder.Entity<Category>().Property<string>(x => x.Name).HasColumnName(@"Name").HasColumnType(@"nchar(10)").ValueGeneratedNever().HasMaxLength(10);
            modelBuilder.Entity<Category>().HasKey(@"Id");
        }
	
        partial void CustomizeCategoryMapping(ModelBuilder modelBuilder);

        #endregion
    
        #region CategoriesPost Mapping

        private void CategoriesPostMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<CategoriesPost>().ToTable(@"CategoriesPosts", @"dbo");
            modelBuilder.Entity<CategoriesPost>().Property<int>(x => x.CategoryId).HasColumnName(@"CategoryId").HasColumnType(@"int").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<CategoriesPost>().Property<int>(x => x.PostId).HasColumnName(@"PostId").HasColumnType(@"int").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<CategoriesPost>().HasKey(@"CategoryId", @"PostId");
        }
	
        partial void CustomizeCategoriesPostMapping(ModelBuilder modelBuilder);

        #endregion
    
        #region Comment Mapping

        private void CommentMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<Comment>().ToTable(@"Comments", @"dbo");
            modelBuilder.Entity<Comment>().Property<int>(x => x.Id).HasColumnName(@"Id").HasColumnType(@"int").IsRequired().ValueGeneratedOnAdd();
            modelBuilder.Entity<Comment>().Property<string>(x => x.Name).HasColumnName(@"Name").HasColumnType(@"nvarchar(50)").ValueGeneratedNever().HasMaxLength(50);
            modelBuilder.Entity<Comment>().Property<string>(x => x.Email).HasColumnName(@"Email").HasColumnType(@"nvarchar(50)").ValueGeneratedNever().HasMaxLength(50);
            modelBuilder.Entity<Comment>().Property<string>(x => x.HomePage).HasColumnName(@"HomePage").HasColumnType(@"nvarchar(50)").ValueGeneratedNever().HasMaxLength(50);
            modelBuilder.Entity<Comment>().Property<string>(x => x.Ip).HasColumnName(@"Ip").HasColumnType(@"nvarchar(50)").ValueGeneratedNever().HasMaxLength(50);
            modelBuilder.Entity<Comment>().Property<string>(x => x.Text).HasColumnName(@"Text").HasColumnType(@"nvarchar(max)").ValueGeneratedNever();
            modelBuilder.Entity<Comment>().Property<System.Nullable<int>>(x => x.PostId).HasColumnName(@"PostId").HasColumnType(@"int").ValueGeneratedNever();
            modelBuilder.Entity<Comment>().HasKey(@"Id");
        }
	
        partial void CustomizeCommentMapping(ModelBuilder modelBuilder);

        #endregion
    
        #region Post Mapping

        private void PostMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<Post>().ToTable(@"Posts", @"dbo");
            modelBuilder.Entity<Post>().Property<int>(x => x.Id).HasColumnName(@"Id").HasColumnType(@"int").IsRequired().ValueGeneratedOnAdd();
            modelBuilder.Entity<Post>().Property<string>(x => x.Discriminator).HasColumnName(@"Discriminator").HasColumnType(@"nvarchar(50)").ValueGeneratedNever().HasMaxLength(50);
            modelBuilder.Entity<Post>().Property<string>(x => x.Title).HasColumnName(@"Title").HasColumnType(@"nvarchar(50)").ValueGeneratedNever().HasMaxLength(50);
            modelBuilder.Entity<Post>().Property<string>(x => x.Text).HasColumnName(@"Text").HasColumnType(@"nvarchar(max)").ValueGeneratedNever();
            modelBuilder.Entity<Post>().Property<System.Nullable<int>>(x => x.PostedAt).HasColumnName(@"PostedAt").HasColumnType(@"int").ValueGeneratedNever();
            modelBuilder.Entity<Post>().Property<System.Nullable<int>>(x => x.BlogId).HasColumnName(@"BlogId").HasColumnType(@"int").ValueGeneratedNever();
            modelBuilder.Entity<Post>().Property<System.Nullable<int>>(x => x.UserId).HasColumnName(@"UserId").HasColumnType(@"int").ValueGeneratedNever();
            modelBuilder.Entity<Post>().HasKey(@"Id");
        }
	
        partial void CustomizePostMapping(ModelBuilder modelBuilder);

        #endregion
    
        #region Tag Mapping

        private void TagMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<Tag>().ToTable(@"Tags", @"dbo");
            modelBuilder.Entity<Tag>().Property<int>(x => x.Id).HasColumnName(@"Id").HasColumnType(@"int").IsRequired().ValueGeneratedOnAdd();
            modelBuilder.Entity<Tag>().Property<string>(x => x.Name).HasColumnName(@"Name").HasColumnType(@"nvarchar(50)").ValueGeneratedNever().HasMaxLength(50);
            modelBuilder.Entity<Tag>().Property<System.Nullable<int>>(x => x.ItemId).HasColumnName(@"ItemId").HasColumnType(@"int").ValueGeneratedNever();
            modelBuilder.Entity<Tag>().Property<string>(x => x.ItemType).HasColumnName(@"ItemType").HasColumnType(@"nvarchar(50)").ValueGeneratedNever().HasMaxLength(50);
            modelBuilder.Entity<Tag>().HasKey(@"Id");
        }
	
        partial void CustomizeTagMapping(ModelBuilder modelBuilder);

        #endregion
    
        #region User Mapping

        private void UserMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<User>().ToTable(@"Users", @"dbo");
            modelBuilder.Entity<User>().Property<int>(x => x.Id).HasColumnName(@"Id").HasColumnType(@"int").IsRequired().ValueGeneratedOnAdd();
            modelBuilder.Entity<User>().Property<string>(x => x.Password).HasColumnName(@"Password").HasColumnType(@"nvarchar(50)").ValueGeneratedNever().HasMaxLength(50);
            modelBuilder.Entity<User>().Property<string>(x => x.Username).HasColumnName(@"Username").HasColumnType(@"nvarchar(50)").ValueGeneratedNever().HasMaxLength(50);
            modelBuilder.Entity<User>().Property<string>(x => x.Email).HasColumnName(@"Email").HasColumnType(@"nvarchar(50)").ValueGeneratedNever().HasMaxLength(50);
            modelBuilder.Entity<User>().Property<System.Nullable<System.DateTime>>(x => x.CreatedAt).HasColumnName(@"CreatedAt").HasColumnType(@"datetime2").ValueGeneratedNever();
            modelBuilder.Entity<User>().Property<string>(x => x.Bio).HasColumnName(@"Bio").HasColumnType(@"nvarchar(50)").ValueGeneratedNever().HasMaxLength(50);
            modelBuilder.Entity<User>().HasKey(@"Id");
        }
	
        partial void CustomizeUserMapping(ModelBuilder modelBuilder);

        #endregion
    
        #region UsersBlog Mapping

        private void UsersBlogMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<UsersBlog>().ToTable(@"UsersBlogs", @"dbo");
            modelBuilder.Entity<UsersBlog>().Property<int>(x => x.UserId).HasColumnName(@"UserId").HasColumnType(@"int").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<UsersBlog>().Property<int>(x => x.BlogId).HasColumnName(@"BlogId").HasColumnType(@"int").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<UsersBlog>().HasKey(@"UserId", @"BlogId");
        }
	
        partial void CustomizeUsersBlogMapping(ModelBuilder modelBuilder);

        #endregion

        private void RelationshipsMapping(ModelBuilder modelBuilder)
        {

        #region Blog Navigation properties

            modelBuilder.Entity<Blog>().HasMany(x => x.Posts).WithOne(op => op.Blog).HasForeignKey(@"BlogId");
            modelBuilder.Entity<Blog>().HasMany(x => x.UsersBlogs).WithOne(op => op.Blog).IsRequired(true).HasForeignKey(@"BlogId");

        #endregion

        #region Category Navigation properties

            modelBuilder.Entity<Category>().HasMany(x => x.CategoriesPosts).WithOne(op => op.Category).IsRequired(true).HasForeignKey(@"CategoryId");

        #endregion

        #region CategoriesPost Navigation properties

            modelBuilder.Entity<CategoriesPost>().HasOne(x => x.Post).WithMany(op => op.CategoriesPosts).IsRequired(true).HasForeignKey(@"PostId");
            modelBuilder.Entity<CategoriesPost>().HasOne(x => x.Category).WithMany(op => op.CategoriesPosts).IsRequired(true).HasForeignKey(@"CategoryId");

        #endregion

        #region Comment Navigation properties

            modelBuilder.Entity<Comment>().HasOne(x => x.Post).WithMany(op => op.Comments).HasForeignKey(@"PostId");

        #endregion

        #region Post Navigation properties

            modelBuilder.Entity<Post>().HasMany(x => x.CategoriesPosts).WithOne(op => op.Post).IsRequired(true).HasForeignKey(@"PostId");
            modelBuilder.Entity<Post>().HasMany(x => x.Comments).WithOne(op => op.Post).HasForeignKey(@"PostId");
            modelBuilder.Entity<Post>().HasOne(x => x.Blog).WithMany(op => op.Posts).HasForeignKey(@"BlogId");
            modelBuilder.Entity<Post>().HasOne(x => x.User).WithMany(op => op.Posts).HasForeignKey(@"UserId");

        #endregion

        #region User Navigation properties

            modelBuilder.Entity<User>().HasMany(x => x.Posts).WithOne(op => op.User).HasForeignKey(@"UserId");
            modelBuilder.Entity<User>().HasMany(x => x.UsersBlogs).WithOne(op => op.User).IsRequired(true).HasForeignKey(@"UserId");

        #endregion

        #region UsersBlog Navigation properties

            modelBuilder.Entity<UsersBlog>().HasOne(x => x.User).WithMany(op => op.UsersBlogs).IsRequired(true).HasForeignKey(@"UserId");
            modelBuilder.Entity<UsersBlog>().HasOne(x => x.Blog).WithMany(op => op.UsersBlogs).IsRequired(true).HasForeignKey(@"BlogId");

        #endregion
        }

        partial void CustomizeMapping(ref ModelBuilder modelBuilder);

        public bool HasChanges()
        {
            return ChangeTracker.Entries().Any(e => e.State == Microsoft.EntityFrameworkCore.EntityState.Added || e.State == Microsoft.EntityFrameworkCore.EntityState.Modified || e.State == Microsoft.EntityFrameworkCore.EntityState.Deleted);
        }

        partial void OnCreated();
    }
}
